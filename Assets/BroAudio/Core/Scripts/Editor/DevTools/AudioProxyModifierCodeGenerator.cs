#if BroAudio_DevOnly
using System;
using System.Collections.Generic;
using System.IO;
using UnityEditor;
using UnityEngine;

namespace Ami.Extension.Reflection
{
    public static class AudioSourceProxyGenerator
    {
        [MenuItem("Tools/BroAudio/Generate Audio Source Proxy")]
        public static void GenerateAudioSourceProxy()
        {
            ProxyModifierCodeGenerator.Parameters parameters = new ProxyModifierCodeGenerator.Parameters()
            {
                Namespace = "Ami.Extension",
                ScriptName = "AudioSourceProxy",
                Path = Path.GetFullPath("Assets/BroAudio/Core/Scripts/Player/AutoGeneratedCode"),
                ClassImplementation = nameof(IDisposable),
                Usings = new List<string> { nameof(UnityEngine), nameof(UnityEngine) + ".Audio" },
                MethodNameList = new string[] 
                { 
                    nameof(AudioSource.GetCustomCurve), nameof(AudioSource.SetCustomCurve),
                    nameof(AudioSource.GetAmbisonicDecoderFloat), nameof(AudioSource.SetAmbisonicDecoderFloat),
                    nameof(AudioSource.GetSpatializerFloat), nameof(AudioSource.SetSpatializerFloat),
                }
            };

            ProxyModifierCodeGenerator.GenerateModifierCode<AudioSource>(parameters, needEmpty: true);
        }
        
        [MenuItem("Tools/BroAudio/Generate Audio Effect Proxies")]
        public static void GenerateAudioEffectProxies()
        {
            ProxyModifierCodeGenerator.Parameters parameters = new ProxyModifierCodeGenerator.Parameters()
            {
                Namespace = "Ami.Extension",
                Path = Path.GetFullPath("Assets/BroAudio/Core/Scripts/Player/AutoGeneratedCode/AudioEffects"),
                ClassImplementation = nameof(IAudioEffectModifier),
                IncludedBaseTypes = new List<Type> { typeof(Behaviour) },
                Usings = new List<string> { nameof(UnityEngine) },
                DependencyComponentTypes = new Type[] { typeof(AudioSource) },
            };

            Generate<AudioHighPassFilter>(nameof(AudioHighPassFilter));
            Generate<AudioLowPassFilter>(nameof(AudioLowPassFilter));
            Generate<AudioReverbFilter>(nameof(AudioReverbFilter));
            Generate<AudioDistortionFilter>(nameof(AudioDistortionFilter));
            Generate<AudioEchoFilter>(nameof(AudioEchoFilter));
            Generate<AudioChorusFilter>(nameof(AudioChorusFilter));


            void Generate<T>(string className) where T : Component
            {
                parameters.ScriptName = className + "Proxy";
                ProxyModifierCodeGenerator.GenerateModifierCode<T>(parameters, isEffectModifier: true);
            }
        }
    }
}
#endif